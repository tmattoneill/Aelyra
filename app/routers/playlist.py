
from fastapi import APIRouter, HTTPException
from fastapi.responses import JSONResponse
import logging

from app.models.requests import GeneratePlaylistRequest, SearchTracksRequest, CreatePlaylistRequest
from app.models.responses import GeneratePlaylistResponse, ErrorResponse
from app.services.spotify_service import SpotifyService
from app.services.openai_service import OpenAIService

router = APIRouter()
logger = logging.getLogger(__name__)

@router.post("/generate-playlist", response_model=GeneratePlaylistResponse)
async def generate_playlist(request: GeneratePlaylistRequest):
    """
    Main endpoint: Generate a playlist based on natural language query
    """
    try:
        # Initialize services
        openai_service = OpenAIService(request.openai_api_key)
        spotify_service = SpotifyService(request.spotify_access_token)
        
        # Generate track suggestions using OpenAI
        suggested_tracks = await openai_service.generate_track_suggestions(request.query)
        
        # Search for tracks on Spotify and get alternatives
        tracks_with_alternatives = []
        for track in suggested_tracks:
            search_results = await spotify_service.search_track(f"{track['title']} {track['artist']}")
            if search_results:
                # Take the first result as main track, rest as alternatives
                main_track = search_results[0]
                alternatives = search_results[1:5]  # Up to 4 alternatives
                
                tracks_with_alternatives.append({
                    "title": main_track["title"],
                    "artist": main_track["artist"],
                    "spotify_id": main_track["spotify_id"],
                    "album_art": main_track.get("album_art"),
                    "preview_url": main_track.get("preview_url"),
                    "alternatives": alternatives
                })
        
        # Generate playlist title
        playlist_name = await openai_service.generate_playlist_title(request.query)
        
        return GeneratePlaylistResponse(
            playlist_name=playlist_name,
            tracks=tracks_with_alternatives
        )
        
    except Exception as e:
        logger.error(f"Error generating playlist: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/search-tracks")
async def search_tracks(q: str, spotify_access_token: str):
    """
    Search for specific tracks on Spotify
    """
    try:
        spotify_service = SpotifyService(spotify_access_token)
        results = await spotify_service.search_track(q)
        return {"results": results}
    except Exception as e:
        logger.error(f"Error searching tracks: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/create-playlist")
async def create_playlist(request: CreatePlaylistRequest):
    """
    Create a playlist in user's Spotify account
    """
    try:
        spotify_service = SpotifyService(request.spotify_access_token)
        
        # Get user ID first
        user_profile = await spotify_service.get_user_profile()
        user_id = user_profile["id"]
        
        # Create playlist
        playlist = await spotify_service.create_playlist(
            user_id, 
            request.name, 
            request.description or f"Generated by PlayMaker"
        )
        
        # Add tracks to playlist
        if request.track_ids:
            await spotify_service.add_tracks_to_playlist(playlist["id"], request.track_ids)
        
        return {
            "playlist_id": playlist["id"],
            "playlist_url": playlist["external_urls"]["spotify"],
            "message": "Playlist created successfully"
        }
        
    except Exception as e:
        logger.error(f"Error creating playlist: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))
