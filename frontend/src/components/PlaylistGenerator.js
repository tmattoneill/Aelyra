
import React, { useState } from 'react';
import axios from 'axios';

const PlaylistGenerator = ({ spotifyToken, userInfo, onLogout, onTokenExpired }) => {
  const [query, setQuery] = useState('');
  const [openaiKey, setOpenaiKey] = useState('');
  const [tracks, setTracks] = useState([]);
  const [selectedTracks, setSelectedTracks] = useState(new Set());
  const [playlistName, setPlaylistName] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [rawAiResponse, setRawAiResponse] = useState('');
  const [showRawResponse, setShowRawResponse] = useState(false);
  const [success, setSuccess] = useState('');
  const [step, setStep] = useState('input'); // 'input', 'generated', 'created'

  // Helper function to check if error is token expiration
  const isTokenExpiredError = (error) => {
    return error.response?.status === 401 || 
           error.response?.data?.detail?.includes('token expired') ||
           error.response?.data?.detail?.includes('token expired or invalid');
  };

  const generatePlaylist = async () => {
    if (!query.trim()) {
      setError('Please enter a description for your playlist');
      return;
    }

    setLoading(true);
    setError('');
    setSuccess('');

    try {
      const response = await axios.post('/api/generate-playlist', {
        query: query.trim(),
        openai_api_key: openaiKey || null,
        spotify_access_token: spotifyToken
      });

      setTracks(response.data.tracks);
      setPlaylistName(response.data.playlist_name);
      setSelectedTracks(new Set(response.data.tracks.map(track => track.spotify_id)));
      setStep('generated');
    } catch (err) {
      const errorDetail = err.response?.data?.detail || 'Failed to generate playlist';
      
      // Check if this is an AI parsing error with raw response
      if (errorDetail.includes('Failed to parse AI response|RAW_RESPONSE:')) {
        const [errorMsg, rawResponse] = errorDetail.split('|RAW_RESPONSE:');
        setError(errorMsg);
        setRawAiResponse(rawResponse);
      } else {
        setError(errorDetail);
        setRawAiResponse('');
      }
      setShowRawResponse(false);
    } finally {
      setLoading(false);
    }
  };

  const createPlaylist = async () => {
    if (selectedTracks.size === 0) {
      setError('Please select at least one track');
      return;
    }

    setLoading(true);
    setError('');

    try {
      const response = await axios.post('/api/create-playlist', {
        name: playlistName,
        track_ids: Array.from(selectedTracks),
        spotify_access_token: spotifyToken,
        description: `Generated by PlayMaker AI for: "${query}"`
      });

      setSuccess(`Playlist "${playlistName}" created successfully! You can find it in your Spotify account.`);
      setStep('created');
    } catch (err) {
      if (isTokenExpiredError(err)) {
        onTokenExpired();
        return;
      }
      setError(err.response?.data?.detail || 'Failed to create playlist');
    } finally {
      setLoading(false);
    }
  };

  const toggleTrackSelection = (trackId) => {
    const newSelection = new Set(selectedTracks);
    if (newSelection.has(trackId)) {
      newSelection.delete(trackId);
    } else {
      newSelection.add(trackId);
    }
    setSelectedTracks(newSelection);
  };

  const selectAlternative = (originalTrackId, alternativeTrack) => {
    const newSelection = new Set(selectedTracks);
    newSelection.delete(originalTrackId);
    newSelection.add(alternativeTrack.spotify_id);
    setSelectedTracks(newSelection);
    
    // Update the tracks array to show the selected alternative
    setTracks(tracks.map(track => 
      track.spotify_id === originalTrackId 
        ? { ...alternativeTrack, alternatives: track.alternatives }
        : track
    ));
  };

  const startOver = () => {
    setQuery('');
    setTracks([]);
    setSelectedTracks(new Set());
    setPlaylistName('');
    setError('');
    setSuccess('');
    setStep('input');
  };

  if (loading) {
    return (
      <div className="card">
        <div className="loading">
          <h3>
            {step === 'input' ? 'Generating your playlist...' : 'Creating playlist in Spotify...'}
          </h3>
          <p>This may take a few moments.</p>
        </div>
      </div>
    );
  }

  return (
    <div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
        <div style={{ color: '#1db954', fontWeight: '500' }}>
          {userInfo?.display_name && (
            <>Hello, {userInfo.display_name}!</>
          )}
        </div>
        <button className="btn btn-secondary" onClick={onLogout}>
          Disconnect Spotify
        </button>
      </div>

      {step === 'input' && (
        <div className="card">
          <h2>Describe Your Perfect Playlist</h2>
          <p style={{ marginBottom: '20px', color: '#666' }}>
            Tell us what kind of music you're looking for. Be as specific or general as you'd like!
          </p>

          <div className="form-group">
            <label htmlFor="query">Playlist Description</label>
            <textarea
              id="query"
              className="form-input textarea"
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              placeholder="e.g., 'Upbeat songs for a morning workout' or 'Chill indie songs for studying' or 'Classic rock anthems from the 80s'"
              rows="4"
            />
          </div>

          <div className="form-group">
            <label htmlFor="openai-key">OpenAI API Key (Optional)</label>
            <input
              id="openai-key"
              type="password"
              className="form-input"
              value={openaiKey}
              onChange={(e) => setOpenaiKey(e.target.value)}
              placeholder="sk-... (leave blank to use default)"
            />
            <small style={{ color: '#666', fontSize: '14px' }}>
              If you have your own OpenAI API key, you can enter it here for potentially better results.
            </small>
          </div>

          {error && (
            <div className="error">
              {error}
              {rawAiResponse && (
                <div style={{ marginTop: '10px' }}>
                  <button 
                    onClick={() => setShowRawResponse(!showRawResponse)}
                    style={{ 
                      background: 'none', 
                      border: '1px solid #ccc', 
                      padding: '5px 10px', 
                      borderRadius: '4px',
                      cursor: 'pointer',
                      fontSize: '12px'
                    }}
                  >
                    {showRawResponse ? 'Hide' : 'Show'} AI Response
                  </button>
                  {showRawResponse && (
                    <div style={{ 
                      marginTop: '10px', 
                      padding: '10px', 
                      backgroundColor: '#f5f5f5', 
                      border: '1px solid #ddd',
                      borderRadius: '4px',
                      fontSize: '12px',
                      fontFamily: 'monospace',
                      whiteSpace: 'pre-wrap',
                      maxHeight: '200px',
                      overflow: 'auto'
                    }}>
                      {rawAiResponse}
                    </div>
                  )}
                </div>
              )}
            </div>
          )}

          <button className="btn" onClick={generatePlaylist}>
            Generate Playlist
          </button>
        </div>
      )}

      {step === 'generated' && tracks.length > 0 && (
        <div className="card">
          <h2>"{playlistName}"</h2>
          <p style={{ marginBottom: '20px', color: '#666' }}>
            Here are the tracks we found for you. Select the ones you want to include, 
            or click on alternatives to swap them out.
          </p>

          <div className="track-list">
            {tracks.map((track) => (
              <div key={track.spotify_id} className={`track-item ${selectedTracks.has(track.spotify_id) ? 'selected' : ''}`}>
                {track.album_art && (
                  <img src={track.album_art} alt={track.title} className="track-artwork" />
                )}
                <div className="track-info">
                  <div className="track-title">{track.title}</div>
                  <div className="track-artist">{track.artist}</div>
                  
                  {track.alternatives && track.alternatives.length > 0 && (
                    <div className="alternatives">
                      <h4>Alternative versions:</h4>
                      {track.alternatives.map((alt, index) => (
                        <div 
                          key={alt.spotify_id} 
                          className="alternative-item"
                          onClick={() => selectAlternative(track.spotify_id, alt)}
                        >
                          {alt.album_art && (
                            <img src={alt.album_art} alt={alt.title} className="alternative-artwork" />
                          )}
                          <div>
                            <div style={{ fontSize: '14px', fontWeight: '500' }}>{alt.title}</div>
                            <div style={{ fontSize: '12px', color: '#666' }}>{alt.artist}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                <input
                  type="checkbox"
                  className="track-checkbox"
                  checked={selectedTracks.has(track.spotify_id)}
                  onChange={() => toggleTrackSelection(track.spotify_id)}
                />
              </div>
            ))}
          </div>

          <div style={{ marginTop: '30px', textAlign: 'center' }}>
            <p style={{ marginBottom: '20px', color: '#666' }}>
              {selectedTracks.size} of {tracks.length} tracks selected
            </p>
            
            {error && (
              <div className="error">
                {error}
                {rawAiResponse && (
                  <div style={{ marginTop: '10px' }}>
                    <button 
                      onClick={() => setShowRawResponse(!showRawResponse)}
                      style={{ 
                        background: 'none', 
                        border: '1px solid #ccc', 
                        padding: '5px 10px', 
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                    >
                      {showRawResponse ? 'Hide' : 'Show'} AI Response
                    </button>
                    {showRawResponse && (
                      <div style={{ 
                        marginTop: '10px', 
                        padding: '10px', 
                        backgroundColor: '#f5f5f5', 
                        border: '1px solid #ddd',
                        borderRadius: '4px',
                        fontSize: '12px',
                        fontFamily: 'monospace',
                        whiteSpace: 'pre-wrap',
                        maxHeight: '200px',
                        overflow: 'auto'
                      }}>
                        {rawAiResponse}
                      </div>
                    )}
                  </div>
                )}
              </div>
            )}
            
            <button className="btn" onClick={createPlaylist} disabled={selectedTracks.size === 0}>
              Create Playlist in Spotify
            </button>
            <button className="btn btn-secondary" onClick={startOver}>
              Start Over
            </button>
          </div>
        </div>
      )}

      {step === 'created' && (
        <div className="card">
          <h2>Playlist Created!</h2>
          {success && <div className="success">{success}</div>}
          
          <div style={{ textAlign: 'center', marginTop: '30px' }}>
            <button className="btn" onClick={startOver}>
              Create Another Playlist
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default PlaylistGenerator;
